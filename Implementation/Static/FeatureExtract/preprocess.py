# -*- coding:utf-8 -*-
import numpy as np
import sys
from sklearn.utils import shuffle


def split_xy(fname):
    f = open(fname)
    ls = []
    str2int = lambda arr: [float(x) for i, x in enumerate(arr)]
    for line in f.readlines():
        ls.append(str2int(line.strip().split(',')))
    f.close()
    data = np.array(ls)
    # shuffle
    data = shuffle(data)
    # splitXY
    print data.shape
    X = data[:, 1:]
    Y = data[:, 0]
    print "X Shape ", X.shape
    print "Y Shape ", Y.shape
    np.save('d0_X', X)
    np.save('d0_Y', Y)
    return X, Y


def split_train_test(X, y, ratio=0.3):
    tol = y.shape[0]
    n_t = sum(y)
    n_f = tol - n_t
    print "Total", tol, "True", n_t, "False", n_f
    # n_tol:(num_False, num_True)
    # n_ts : (num_test_false, num_test_true)
    n_tol = np.array([n_f, n_t])
    n_ts = n_tol*ratio
    id_ts_t, id_ts_f, id_tr_t, id_tr_f = [], [], [], []
    # print "n_tol", n_tol
    # print "n_ts", n_ts
    for i, x in enumerate(y):
        if x == 0:
            if n_ts[0] > 0:
                id_ts_f.append(i)
                n_ts[0] -= 1
            else:
                id_tr_f.append(i)
        else:
            if n_ts[1] > 0:
                id_ts_t.append(i)
                n_ts[1] -= 1
            else:
                id_tr_t.append(i)
    # print len(id_ts_f), len(id_ts_t)
    # print len(id_tr_f), len(id_tr_t)
    trainX = X[id_tr_f + id_tr_t]
    trainY = y[id_tr_f + id_tr_t]
    testX = X[id_ts_f + id_ts_t]
    testY = y[id_ts_f + id_ts_t]
    trainX, trainY = shuffle(trainX, trainY)
    testX, testY = shuffle(testX, testY)
    print "Train num", trainY.shape[0]
    print "Test num", testY.shape[0]
    return trainX, trainY, testX, testY

if __name__ == '__main__':
    X, y = split_xy(sys.argv[1])
    # trX, trY, tsX, tsY = split_train_test(X, y)
    # np.save('d0_trX', trX)
    # np.save('d0_trY', trY)
    # np.save('d0_tsX', tsX)
    # np.save('d0_tsY', tsY)
