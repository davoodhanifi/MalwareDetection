from Classifier.rf import RandomForestClassifier as RFM
from Classifier.linearSvm import SVMClassifier as linearSvm
from Classifier.rbfSvm import SVMClassifier as rbfSvm
from Classifier.sigmoidSvm import SVMClassifier as sigmoidSvm
from sklearn.model_selection import StratifiedKFold
from sklearn.decomposition import FastICA
from datetime import datetime
import sys
import os
import csv
from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

def build_model(modelType):
    file = open("./Data/train.csv", 'rb')
    rows = csv.reader(file)
    data = []
    lables = []
    for row in rows:
        data.append(row[1:])
        lables.append(row[0])

    print 'Start Time: ' + str(datetime.now())
    print "Building Model... "

    # k-fold
    numFolds = 10
    skf = StratifiedKFold(numFolds)

    lsvc = LinearSVC(C=0.2, penalty="l1", dual=False).fit(data, lables)
    feature_selection_model = SelectFromModel(lsvc, prefit=True)
    new_data = feature_selection_model.transform(data)
    n_features = new_data.shape[1]

    if modelType is 'linearSvm':
        model = linearSvm()
    elif modelType is 'rbfSvm':
        model = rbfSvm()
    elif modelType is 'sigmoidSvm':
        model = sigmoidSvm()
    elif modelType is 'rf':
        model = RFM()
    
    for train_index, test_index in skf.split(new_data, lables):
        train_lables = [lables[tr_index] for tr_index in train_index]
        test_lables = [lables[tst_index] for tst_index in test_index]

        trainData = [new_data[tr_index] for tr_index in train_index]
        testData = [new_data[tst_index] for tst_index in test_index]

        model.train(trainData, train_lables)

        model.test(testData, test_lables)

    print "Build Success!"

    print 'End Time: '+ str(datetime.now())

    return feature_selection_model, model