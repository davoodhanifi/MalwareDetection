from CreateDataset.create_dataset import build_dataset
from CreateModel.create_model import build_model
from Test.test import build_test
from Test.predict_from_files import build_test_from_files
from FeatureExtract.extract import analyze
import numpy as np


def create_dataset(path, apps_type): 
    build_dataset(path, apps_type)

def create_model(modelType):
    return build_model(modelType)

def create_test(feature_selection_model, model):
    build_test(feature_selection_model, model)

def predict_from_files(feature_selection_model, model, path):
    build_test_from_files(feature_selection_model, model, path)

def main(feature_selection_model, model, app_path):
    print "-------------------"
    print "Analyze App: ", app_path
    app_feature = None
    try:
        app_feature = analyze(app_path)
    except Exception as e:
        print "When Analyze app, have an Exception: ", str(e)
    pre_x = np.array(app_feature)
    new_data = feature_selection_model.transform(pre_x)
    pred = model.predict(np.array(new_data).reshape(1,-1))
    pre_y = int(pred[0])
    print "The app: ", app_path
    if pre_y == 1:
        print "    is a Malware."
    else:
        print "    is a normal APP."
