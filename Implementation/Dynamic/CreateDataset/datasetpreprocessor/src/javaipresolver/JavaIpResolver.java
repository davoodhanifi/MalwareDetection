package javaipresolver;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class JavaIpResolver {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        System.out.println("Application starts...");
        try {
             divide(10, 7);

             System.out.println("Application Completed...");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(JavaIpResolver.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JavaIpResolver.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//end of main

    /**
     * آدرسهای IP را معادل عدد صحیحشان را به هر رکورد اضافه میکند
     * @throws IOException 
     */
    public static void resolveIp() throws IOException {
        CSVReader reader = new CSVReader(new FileReader("D:/Andriod/DataSet/TRAFFIC/MALWARE/cvsDataSet/Flows.csv"), ';');
        CSVWriter writer = new CSVWriter(new FileWriter("D:/Andriod/DataSet/TRAFFIC/MALWARE/cvsDataSet/Flows2.csv"), ';');
        String[] nextLine;
        int counter = 1;
        while ((nextLine = reader.readNext()) != null) {
            if (counter++ == 1) {
                continue;
            }

            int sourceIpInt = getIpInteger(nextLine[0]);
            int destIpInt = getIpInteger(nextLine[2]);

            int size = nextLine.length;
            String[] entries = new String[size + 2];
            for (int i = 0; i < size; i++) {
                entries[i] = nextLine[i];
            }
            entries[size] = String.valueOf(sourceIpInt);
            entries[size + 1] = String.valueOf(destIpInt);
            writer.writeNext(entries);
        }
        reader.close();
        writer.close();
    }

    /**
     * یک فایل csv را به دو فایل تقسیم میکند بر اساس پارامترهای تقسیم تعیین شده
     *
     * @param numberOfItems به ازای این تعداد رکورد
     * @param numberOfSelection این تعداد رکورد انتخاب میشوند
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static void divide(int numberOfItems, int numberOfSelection) throws FileNotFoundException, IOException {
        CSVReader reader = new CSVReader(new FileReader("D:/Andriod/DataSet/TRAFFIC/MALWARE/cvsDataSet/Flows.csv"), ';');
        CSVWriter trainWriter = new CSVWriter(new FileWriter("D:/Andriod/DataSet/TRAFFIC/MALWARE/cvsDataSet/Flows3.csv"), ';');
        CSVWriter testWriter = new CSVWriter(new FileWriter("D:/Andriod/DataSet/TRAFFIC/MALWARE/cvsDataSet/Flows4.csv"), ';');
        String[] nextLine;
        int counter = 1;
        while ((nextLine = reader.readNext()) != null) {
            if (counter <= numberOfSelection) {
                trainWriter.writeNext(nextLine);
            } else {
                testWriter.writeNext(nextLine);
            }

            if (counter == numberOfItems) {
                counter = 0;
            }
            counter++;

        }
        reader.close();
        trainWriter.close();
        testWriter.close();
    }

    /**
     *
     * @param ipStr رشته مربوط به آدرس آی‌پی را میگیرد
     * @return عدد صحیح معادل آدرس را برمیگرداند
     * @throws UnknownHostException
     */
    public static int getIpInteger(String ipStr) throws UnknownHostException {
        int[] ip = new int[4];
        String[] parts = ipStr.split("\\.");

        for (int i = 0; i < 4; i++) {
            ip[i] = Integer.parseInt(parts[i]);
        }

        // Add the above IP parts into an int number representing your IP 
        // in a 32-bit binary form
        int ipNumbers = 0;
        for (int i = 0; i < 4; i++) {
            ipNumbers += ip[i] << (24 - (8 * i));
        }
        return ipNumbers;
    }
}
